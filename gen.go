// +build ignore
// +build !windows

package main

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"os/exec"
	"strings"
)

var inputs = []string{
	`$`,
	`$$`,
	`$$$`,
	`$$$$`,
	`$$$$$`,
	`$ $`,
	`$ $ $`,
	`$$ $$`,
	`$$ $ $$`,
	`$\ $`,
	`$\$$`,
	`$$\$`,
	`$$\$$$`,
	`$$ \$$`,
	`$$ \$$ $$`,
	`$$ \$\$ $$`,
	`$\$$$`,
	`$\$$$$`,
	`$$ \$ $$`,
	`$$ $x$ $$`,
	`$x$ $x$ $$`,
	`$x$`,
	`$$x$`,
	`$x$$`,
	`$x$x$`,
	`$x$$x$`,
	`$x$x$x$`,
	`x$$$$`,
	`$x$$$`,
	`$$x$$`,
	`$$$x$`,
	`$$$$x`,
	`$x$$x$$`,
	`$$x$x$$`,
	`$$x$$x$`,
	`$x _k y_ k$`,
	`$x$x`,
	`$x $x`,
	`$x $ x`,
	`$x$ x`,
	`$ x$x`,
	`$$x$$x`,
	`$$x $$x`,
	`$$x $$ x`,
	`$$x$$ x`,
	`$$ x$$x`,
	`x$$x$$x`,
	`    $$x$$`,
	"$`$`",
	"`$`$",
	`<a href="$">$`,
	`$<a href="$">$`,
	`<http://a.b.$c>$`,
	"[link]: $x$\n[link]",
	`a[$b$](c)`,
	`$a[b$](c)`,
	`[$[]$](b)`,
	`[$]$](b)`,
	`[a]($b$)`,
	`[a$b](c$)`,
	"> $$x\n$$",
	" - a\n\n   $x$",
	"# $x$",
	"$x$\n---",
}

var permutands = []string {
	"$x\n$",
	"$x\nx$",
	"$x\n\n$",
	"$\nx\n$",
	"$\nx\nx\nx\n$",
	"$\nx\nx\n\n$",
	"$\n\nx\nx\n$",
	"$\n\nx\n\n$",
	"$$x\n$$",
	"$$x\n\n$$",
	"$$\nx\n$$",
	"$$\nx\nx\nx\n$$",
	"$$\nx\nx\n\n$$",
	"$$\n\nx\nx\n$$",
	"$$\n\nx\n\n$$",
}

func normalize(s string) string {
	s = strings.TrimSpace(s)
	s = strings.ReplaceAll(s, " id=\"x\"", "")
	s = strings.ReplaceAll(s, " class=\"uri\"", "")
	s = strings.ReplaceAll(s, "&quot;", "\"")
	s = strings.ReplaceAll(s, "<li><p>", "<li>\n<p>")
	s = strings.ReplaceAll(s, "</p></li>", "</p>\n</li>")
	return s
}

func pandoc(s string) string {
	var out bytes.Buffer
	cmd := exec.Command("pandoc", "--katex", "--filter", "./katex/filter.js")
	cmd.Stdin = strings.NewReader(s)
	cmd.Stdout = &out
	err := cmd.Run()
	if err != nil {
		log.Fatalf("gen.go: error: %v\n", err)
	}
	return out.String()
}

func testCase(s string) string {
	p := pandoc(s)
	return fmt.Sprintf("\t{%q, %q},\n", s, normalize(p))
}

func main() {
	if len(os.Args) > 0 && os.Args[1] == "windows" {
		log.Println("gen.go: warning: gen.go requires a bash shell and will probably fail on windows!")
	}
	var b bytes.Buffer
	b.WriteString("// Code generated by gen.go. DO NOT EDIT.\n\n")
	b.WriteString("package qjskatex\n\n")
	b.WriteString("var tests = []struct {\n\tin, out string\n}{\n")
	for _, in := range inputs {
		s := testCase(in)
		b.WriteString(s)
	}
	prepost := "txt"
	newlines := [...]string{"", "\n", "\n\n"}
	for _, perm := range permutands {
		for pre := -1; pre < 3; pre++ {
			preamble := ""
			if pre >= 0 {
				preamble += prepost
				preamble += newlines[pre]
			}
			for post := -1; post < 3; post++ {
				t := preamble + perm
				if post >= 0 {
					t += newlines[post]
					t += prepost
				}
				b.WriteString(testCase(t))
			}
		}
	}
	b.WriteString("}\n")
	ioutil.WriteFile("gen_test.go", b.Bytes(), 0644)
}
